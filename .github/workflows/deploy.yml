name: CI/CD with Terraform

on:
  push:
    branches:
      - Complete-CI/CD-with-Terraform-AWS

env:
  AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
  AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY_ID }}
  SSH_KEY_PRIVATE: ${{ secrets.AWS_SSH_KEY_PRIVATE }}
  SSH_KEY_PUBLIC: ${{ secrets.AWS_SSH_KEY_PUBLIC }}
  TF_STATE_BUCKET_NAME: ${{ secrets.AWS_TF_STATE_BUCKET_NAME }}
  AWS_REGION: us-east-1

jobs:
  deploy-infra:
    runs-on: ubuntu-latest
    outputs:
      instance_public_ip: ${{ steps.set_ip.outputs.instance_public_ip }}
    steps:
      - name: Checkout Code
        uses: actions/checkout@v2

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v1
        with:
          terraform_version: "1.0.0"
          terraform_wrapper: false

      - name: Verify Terraform Installation
        run: terraform --version 

      - name: Terraform Init
        id: init
        run: terraform init -backend-config="bucket=engys-bucket" -backend-config="region=us-east-1"
        working-directory: ./terraform

      - name: Terraform Plan
        id: plan
        run: |
          terraform plan \
          -var="region=us-east-1" \
          -var="public_key=$SSH_KEY_PUBLIC" \
          -var="private_key=$SSH_KEY_PRIVATE" \
          -var="key_name=deployer-key" \
          -out=PLAN
        working-directory: ./terraform

      - name: Terraform Apply
        id: apply 
        run: terraform apply PLAN
        working-directory: ./terraform

      - name: Set Output
        id: set_ip
        run: |
          echo "instance_public_ip=$(terraform output -raw instance_public_ip)" >> $GITHUB_ENV
          echo "::set-output name=instance_public_ip::$(terraform output -raw instance_public_ip)"

  deploy-app:
    runs-on: ubuntu-latest
    needs: deploy-infra
    env:
      SERVER_PUBLIC_IP: ${{ needs.deploy-infra.outputs.instance_public_ip }}
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Set IMAGE Variable
        run: echo "IMAGE=latest" >> $GITHUB_ENV

      - name: Debug IMAGE and IP
        run: |
          echo "Using IMAGE: $IMAGE"
          echo "Server Public IP: $SERVER_PUBLIC_IP"

      - name: Login to ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Build and Push Docker Image
        env:
          REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          REPOSITORY: devops-pro1
          IMAGE: latest
        run: |
          docker build -t $REGISTRY/$REPOSITORY:$IMAGE .
          docker push $REGISTRY/$REPOSITORY:$IMAGE
        working-directory: ./node-app

      - name: Deploy Docker Image to EC2
        uses: appleboy/ssh-action@master
        with:
          host: ${{ env.SERVER_PUBLIC_IP }}
          username: ubuntu
          key: ${{ secrets.AWS_SSH_KEY_PRIVATE }}
          envs: SSH_KEY_PRIVATE,REGISTRY,REPOSITORY,IMAGE,AWS_ACCESS_KEY_ID,AWS_SECRET_ACCESS_KEY,AWS_REGION
          script: |
            sudo apt update
            sudo apt install docker.io -y
            sudo apt install awscli -y
            sudo $(aws ecr get-login --no-include-email --region us-east-1)
            sudo docker stop myappcontainer || true
            sudo docker rm myappcontainer || true
            sudo docker pull $REGISTRY/$REPOSITORY:$IMAGE
            sudo docker run -d --name myappcontainer -p 80:8080 $REGISTRY/$REPOSITORY:$IMAGE
